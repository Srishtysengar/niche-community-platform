{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport API from \"../../api/axiosInstance\";\n\n// Fetch comments for a post\nexport const fetchCommentsByPost = createAsyncThunk(\"comments/fetchByPost\", async (postId, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    var _getState$auth$user;\n    const token = (_getState$auth$user = getState().auth.user) === null || _getState$auth$user === void 0 ? void 0 : _getState$auth$user.token;\n    const {\n      data\n    } = await API.get(`/comments/${postId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return {\n      postId,\n      comments: data\n    };\n  } catch (err) {\n    var _err$response, _err$response2, _err$response2$data;\n    console.error(\"Error fetching comments:\", ((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || err.message);\n    return rejectWithValue(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || \"Failed to load comments\");\n  }\n});\n\n// Add a comment\nexport const addComment = createAsyncThunk(\"comments/add\", async ({\n  postId,\n  text\n}, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    var _getState$auth$user2;\n    const token = (_getState$auth$user2 = getState().auth.user) === null || _getState$auth$user2 === void 0 ? void 0 : _getState$auth$user2.token;\n    const {\n      data\n    } = await API.post(`/comments`, {\n      postId,\n      text\n    }, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return {\n      postId,\n      comment: data\n    };\n  } catch (err) {\n    var _err$response3, _err$response4, _err$response4$data;\n    console.error(\"Error adding comment:\", ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : _err$response3.data) || err.message);\n    return rejectWithValue(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || \"Failed to add comment\");\n  }\n});\nconst commentSlice = createSlice({\n  name: \"comments\",\n  initialState: {\n    byPost: {},\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder\n    // Fetch comments\n    .addCase(fetchCommentsByPost.pending, state => {\n      state.loading = true;\n    }).addCase(fetchCommentsByPost.fulfilled, (state, action) => {\n      state.loading = false;\n      state.byPost[action.payload.postId] = action.payload.comments;\n    }).addCase(fetchCommentsByPost.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Add comment\n    .addCase(addComment.fulfilled, (state, action) => {\n      const {\n        postId,\n        comment\n      } = action.payload;\n      if (!state.byPost[postId]) state.byPost[postId] = [];\n      state.byPost[postId].unshift(comment);\n    }).addCase(addComment.rejected, (state, action) => {\n      state.error = action.payload;\n    });\n  }\n});\nexport default commentSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","API","fetchCommentsByPost","postId","getState","rejectWithValue","_getState$auth$user","token","auth","user","data","get","headers","Authorization","comments","err","_err$response","_err$response2","_err$response2$data","console","error","response","message","addComment","text","_getState$auth$user2","post","comment","_err$response3","_err$response4","_err$response4$data","commentSlice","name","initialState","byPost","loading","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","unshift","reducer"],"sources":["C:/Users/srish/OneDrive/Desktop/build project/niche-community-platform/frontend/src/features/comment/commentSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport API from \"../../api/axiosInstance\";\r\n\r\n// Fetch comments for a post\r\nexport const fetchCommentsByPost = createAsyncThunk(\r\n  \"comments/fetchByPost\",\r\n  async (postId, { getState, rejectWithValue }) => {\r\n    try {\r\n      const token = getState().auth.user?.token;\r\n      const { data } = await API.get(`/comments/${postId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return { postId, comments: data };\r\n    } catch (err) {\r\n      console.error(\"Error fetching comments:\", err.response?.data || err.message);\r\n      return rejectWithValue(\r\n        err.response?.data?.message || \"Failed to load comments\"\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\n// Add a comment\r\nexport const addComment = createAsyncThunk(\r\n  \"comments/add\",\r\n  async ({ postId, text }, { getState, rejectWithValue }) => {\r\n    try {\r\n      const token = getState().auth.user?.token;\r\n      const { data } = await API.post(\r\n        `/comments`,\r\n        { postId, text },\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      return { postId, comment: data };\r\n    } catch (err) {\r\n      console.error(\"Error adding comment:\", err.response?.data || err.message);\r\n      return rejectWithValue(\r\n        err.response?.data?.message || \"Failed to add comment\"\r\n      );\r\n    }\r\n  }\r\n);\r\n\r\nconst commentSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState: { byPost: {}, loading: false, error: null },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch comments\r\n      .addCase(fetchCommentsByPost.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchCommentsByPost.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.byPost[action.payload.postId] = action.payload.comments;\r\n      })\r\n      .addCase(fetchCommentsByPost.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n\r\n      // Add comment\r\n      .addCase(addComment.fulfilled, (state, action) => {\r\n        const { postId, comment } = action.payload;\r\n        if (!state.byPost[postId]) state.byPost[postId] = [];\r\n        state.byPost[postId].unshift(comment);\r\n      })\r\n      .addCase(addComment.rejected, (state, action) => {\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default commentSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}