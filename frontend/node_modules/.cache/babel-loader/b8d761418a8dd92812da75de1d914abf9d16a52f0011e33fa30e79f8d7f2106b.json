{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport API from \"../../api/axiosInstance\";\n\n// Fetch comments for a post\nexport const fetchCommentsByPost = createAsyncThunk(\"comments/fetchByPost\", async (postId, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    var _getState$auth$user;\n    const token = (_getState$auth$user = getState().auth.user) === null || _getState$auth$user === void 0 ? void 0 : _getState$auth$user.token;\n    const {\n      data\n    } = await API.get(`/comments/${postId}`, {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return {\n      postId,\n      comments: data\n    };\n  } catch (err) {\n    var _err$response, _err$response$data;\n    return rejectWithValue(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Failed to load comments\");\n  }\n});\n\n// Add a comment\nexport const addComment = createAsyncThunk(\"comments/add\", async ({\n  postId,\n  text\n}, {\n  getState,\n  rejectWithValue\n}) => {\n  try {\n    var _getState$auth$user2;\n    const token = (_getState$auth$user2 = getState().auth.user) === null || _getState$auth$user2 === void 0 ? void 0 : _getState$auth$user2.token;\n    const {\n      data\n    } = await API.post(`/comments`,\n    // ✅ FIX: no postId in path\n    {\n      postId,\n      text\n    },\n    // ✅ send postId + text in body\n    {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    });\n    return {\n      postId,\n      comment: data\n    };\n  } catch (err) {\n    var _err$response2, _err$response2$data;\n    return rejectWithValue(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || \"Failed to add comment\");\n  }\n});\nconst commentSlice = createSlice({\n  name: \"comments\",\n  initialState: {\n    byPost: {},\n    loading: false,\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchCommentsByPost.pending, state => {\n      state.loading = true;\n    }).addCase(fetchCommentsByPost.fulfilled, (state, action) => {\n      state.loading = false;\n      state.byPost[action.payload.postId] = action.payload.comments;\n    }).addCase(fetchCommentsByPost.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }).addCase(addComment.fulfilled, (state, action) => {\n      const {\n        postId,\n        comment\n      } = action.payload;\n      if (!state.byPost[postId]) state.byPost[postId] = [];\n      state.byPost[postId].unshift(comment);\n    });\n  }\n});\nexport default commentSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","API","fetchCommentsByPost","postId","getState","rejectWithValue","_getState$auth$user","token","auth","user","data","get","headers","Authorization","comments","err","_err$response","_err$response$data","response","message","addComment","text","_getState$auth$user2","post","comment","_err$response2","_err$response2$data","commentSlice","name","initialState","byPost","loading","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","unshift","reducer"],"sources":["C:/Users/srish/OneDrive/Desktop/build project/niche-community-platform/frontend/src/features/comment/commentSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport API from \"../../api/axiosInstance\";\r\n\r\n// Fetch comments for a post\r\nexport const fetchCommentsByPost = createAsyncThunk(\r\n  \"comments/fetchByPost\",\r\n  async (postId, { getState, rejectWithValue }) => {\r\n    try {\r\n      const token = getState().auth.user?.token;\r\n      const { data } = await API.get(`/comments/${postId}`, {\r\n        headers: { Authorization: `Bearer ${token}` },\r\n      });\r\n      return { postId, comments: data };\r\n    } catch (err) {\r\n      return rejectWithValue(err.response?.data?.message || \"Failed to load comments\");\r\n    }\r\n  }\r\n);\r\n\r\n// Add a comment\r\nexport const addComment = createAsyncThunk(\r\n  \"comments/add\",\r\n  async ({ postId, text }, { getState, rejectWithValue }) => {\r\n    try {\r\n      const token = getState().auth.user?.token;\r\n      const { data } = await API.post(\r\n        `/comments`,                   // ✅ FIX: no postId in path\r\n        { postId, text },              // ✅ send postId + text in body\r\n        { headers: { Authorization: `Bearer ${token}` } }\r\n      );\r\n      return { postId, comment: data };\r\n    } catch (err) {\r\n      return rejectWithValue(err.response?.data?.message || \"Failed to add comment\");\r\n    }\r\n  }\r\n);\r\n\r\nconst commentSlice = createSlice({\r\n  name: \"comments\",\r\n  initialState: { byPost: {}, loading: false, error: null },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchCommentsByPost.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(fetchCommentsByPost.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.byPost[action.payload.postId] = action.payload.comments;\r\n      })\r\n      .addCase(fetchCommentsByPost.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      .addCase(addComment.fulfilled, (state, action) => {\r\n        const { postId, comment } = action.payload;\r\n        if (!state.byPost[postId]) state.byPost[postId] = [];\r\n        state.byPost[postId].unshift(comment);\r\n      });\r\n  },\r\n});\r\n\r\nexport default commentSlice.reducer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}